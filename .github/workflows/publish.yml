name: Generate, Test and Publish Notebook

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - '**.txt'

permissions:
  contents: write  # Allow GitHub Actions to create releases

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Julia
      uses: julia-actions/setup-julia@v2
      with:
        version: '1.11.5'

    - name: Load Julia packages from cache
      id: julia-cache
      uses: julia-actions/cache@v2

    - name: Modify global env
      shell: julia --color=yes {0}
      run: |
         using Pkg;
         Pkg.add(["Literate", "NBInclude"])
         Pkg.instantiate()
         Pkg.build() # might be necessary for cached IJulia?

    - name: Generate Notebook
      run: julia gen_notebook.jl

    - name: Test the full notebook
      shell: julia --project=notebook --color=yes {0}
      run: |
         import Pkg;
         Pkg.instantiate()
         Pkg.build() # might be necessary for cached IJulia?
         using NBInclude
         @nbinclude(joinpath(pwd(), "notebook", "workshop_full.ipynb"))

    - name: Create Notebook Archive
      run: |
         cd notebook
         zip ../notebook.zip workshop.ipynb Project.toml Manifest.toml
    - name: Get Commit SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: notebook-${{ env.sha_short }}  # Unique tag per commit
        name: "Notebook Release (${{ env.sha_short }})"
        files: notebook.zip
        body: "Automated notebook release for commit [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Save Julia depot cache on failure
      id: julia-cache-save
      if: cancelled() || failure()
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.julia-cache.outputs.cache-paths }}
        key: ${{ steps.julia-cache.outputs.cache-key }}
